{"ast":null,"code":"// src/components/MicroInteractions.js\nimport React,{useState,useEffect}from'react';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const SnakeGame=()=>{const[snake,setSnake]=useState([[0,0]]);const[food,setFood]=useState([Math.floor(Math.random()*10),Math.floor(Math.random()*10)]);const[direction,setDirection]=useState([0,1]);// Start moving right\nconst[gameOver,setGameOver]=useState(false);const[score,setScore]=useState(0);const[gridSize]=useState(10);// 10x10 grid\nuseEffect(()=>{const handleKeyDown=e=>{switch(e.key){case'ArrowUp':if(direction[0]!==1)setDirection([-1,0]);break;case'ArrowDown':if(direction[0]!==-1)setDirection([1,0]);break;case'ArrowLeft':if(direction[1]!==1)setDirection([0,-1]);break;case'ArrowRight':if(direction[1]!==-1)setDirection([0,1]);break;}};window.addEventListener('keydown',handleKeyDown);return()=>{window.removeEventListener('keydown',handleKeyDown);};},[direction]);useEffect(()=>{const interval=setInterval(()=>{moveSnake();},200);return()=>clearInterval(interval);},[snake,direction]);const moveSnake=()=>{const newSnake=[...snake];const head=newSnake[0];const newHead=[head[0]+direction[0],head[1]+direction[1]];// Check for wall collisions\nif(newHead[0]<0||newHead[0]>=gridSize||newHead[1]<0||newHead[1]>=gridSize||newSnake.some(segment=>segment[0]===newHead[0]&&segment[1]===newHead[1])){setGameOver(true);return;}// Check for food collision\nif(newHead[0]===food[0]&&newHead[1]===food[1]){newSnake.unshift(newHead);setFood([Math.floor(Math.random()*gridSize),Math.floor(Math.random()*gridSize)]);setScore(prevScore=>prevScore+1);}else{newSnake.unshift(newHead);newSnake.pop();// Remove last segment\n}setSnake(newSnake);};const restartGame=()=>{setSnake([[0,0]]);setFood([Math.floor(Math.random()*gridSize),Math.floor(Math.random()*gridSize)]);setDirection([0,1]);// Reset direction to right\nsetGameOver(false);setScore(0);};return/*#__PURE__*/_jsxs(\"section\",{style:styles.container,children:[/*#__PURE__*/_jsx(\"h2\",{style:styles.title,children:\"Snake Game\"}),/*#__PURE__*/_jsxs(\"p\",{style:styles.score,children:[\"Score: \",score]}),gameOver?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"p\",{style:styles.gameOver,children:\"Game Over!\"}),/*#__PURE__*/_jsx(\"button\",{style:styles.restartButton,onClick:restartGame,children:\"Restart Game\"})]}):/*#__PURE__*/_jsx(\"div\",{style:styles.grid,children:Array.from({length:gridSize}).map((_,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{style:styles.row,children:Array.from({length:gridSize}).map((_,colIndex)=>{const isSnakeSegment=snake.some(segment=>segment[0]===rowIndex&&segment[1]===colIndex);const isFood=food[0]===rowIndex&&food[1]===colIndex;return/*#__PURE__*/_jsx(\"div\",{style:{...styles.cell,backgroundColor:isSnakeSegment?'#00ffcc':isFood?'#ff007f':'#333'}},`${rowIndex}-${colIndex}`);})},rowIndex))})]});};const styles={container:{padding:'1rem',textAlign:'center',height:'80vh',// Reduced height for better fit\ndisplay:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center'},title:{fontSize:'2rem',color:'#00ffcc'},score:{fontSize:'1.5rem',color:'#fff'},gameOver:{fontSize:'2rem',color:'#ff007f'},restartButton:{padding:'1rem 2rem',fontSize:'1rem',backgroundColor:'#00ffcc',borderRadius:'6px',border:'none',cursor:'pointer'},grid:{display:'inline-grid',gridTemplateColumns:`repeat(${10}, 20px)`// Adjusted for a smaller layout\n},row:{display:'flex'},cell:{width:'20px',// Each cell's width\nheight:'20px'// Each cell's height\n}};export default SnakeGame;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","SnakeGame","snake","setSnake","food","setFood","Math","floor","random","direction","setDirection","gameOver","setGameOver","score","setScore","gridSize","handleKeyDown","e","key","window","addEventListener","removeEventListener","interval","setInterval","moveSnake","clearInterval","newSnake","head","newHead","some","segment","unshift","prevScore","pop","restartGame","style","styles","container","children","title","restartButton","onClick","grid","Array","from","length","map","_","rowIndex","row","colIndex","isSnakeSegment","isFood","cell","backgroundColor","padding","textAlign","height","display","flexDirection","justifyContent","alignItems","fontSize","color","borderRadius","border","cursor","gridTemplateColumns","width"],"sources":["C:/Users/DELL/Desktop/PORTFOLIO/portfolio/src/components/MicroInteractions.js"],"sourcesContent":["// src/components/MicroInteractions.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst SnakeGame = () => {\r\n    const [snake, setSnake] = useState([[0, 0]]);\r\n    const [food, setFood] = useState([Math.floor(Math.random() * 10), Math.floor(Math.random() * 10)]);\r\n    const [direction, setDirection] = useState([0, 1]); // Start moving right\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const [gridSize] = useState(10); // 10x10 grid\r\n\r\n    useEffect(() => {\r\n        const handleKeyDown = (e) => {\r\n            switch (e.key) {\r\n                case 'ArrowUp':\r\n                    if (direction[0] !== 1) setDirection([-1, 0]);\r\n                    break;\r\n                case 'ArrowDown':\r\n                    if (direction[0] !== -1) setDirection([1, 0]);\r\n                    break;\r\n                case 'ArrowLeft':\r\n                    if (direction[1] !== 1) setDirection([0, -1]);\r\n                    break;\r\n                case 'ArrowRight':\r\n                    if (direction[1] !== -1) setDirection([0, 1]);\r\n                    break;\r\n            }\r\n        };\r\n\r\n        window.addEventListener('keydown', handleKeyDown);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, [direction]);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            moveSnake();\r\n        }, 200);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [snake, direction]);\r\n\r\n    const moveSnake = () => {\r\n        const newSnake = [...snake];\r\n        const head = newSnake[0];\r\n        const newHead = [head[0] + direction[0], head[1] + direction[1]];\r\n\r\n        // Check for wall collisions\r\n        if (newHead[0] < 0 || newHead[0] >= gridSize || newHead[1] < 0 || newHead[1] >= gridSize || \r\n            newSnake.some(segment => segment[0] === newHead[0] && segment[1] === newHead[1])) {\r\n            setGameOver(true);\r\n            return;\r\n        }\r\n\r\n        // Check for food collision\r\n        if (newHead[0] === food[0] && newHead[1] === food[1]) {\r\n            newSnake.unshift(newHead);\r\n            setFood([Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)]);\r\n            setScore(prevScore => prevScore + 1);\r\n        } else {\r\n            newSnake.unshift(newHead);\r\n            newSnake.pop(); // Remove last segment\r\n        }\r\n\r\n        setSnake(newSnake);\r\n    };\r\n\r\n    const restartGame = () => {\r\n        setSnake([[0, 0]]);\r\n        setFood([Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)]);\r\n        setDirection([0, 1]); // Reset direction to right\r\n        setGameOver(false);\r\n        setScore(0);\r\n    };\r\n\r\n    return (\r\n        <section style={styles.container}>\r\n            <h2 style={styles.title}>Snake Game</h2>\r\n            <p style={styles.score}>Score: {score}</p>\r\n            {gameOver ? (\r\n                <>\r\n                    <p style={styles.gameOver}>Game Over!</p>\r\n                    <button style={styles.restartButton} onClick={restartGame}>Restart Game</button>\r\n                </>\r\n            ) : (\r\n                <div style={styles.grid}>\r\n                    {Array.from({ length: gridSize }).map((_, rowIndex) =>\r\n                        <div key={rowIndex} style={styles.row}>\r\n                            {Array.from({ length: gridSize }).map((_, colIndex) => {\r\n                                const isSnakeSegment = snake.some(segment => segment[0] === rowIndex && segment[1] === colIndex);\r\n                                const isFood = food[0] === rowIndex && food[1] === colIndex;\r\n                                return (\r\n                                    <div key={`${rowIndex}-${colIndex}`} style={{\r\n                                        ...styles.cell,\r\n                                        backgroundColor: isSnakeSegment ? '#00ffcc' : isFood ? '#ff007f' : '#333',\r\n                                    }} />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </section>\r\n    );\r\n};\r\n\r\nconst styles = {\r\n    container: {\r\n        padding: '1rem',\r\n        textAlign: 'center',\r\n        height: '80vh', // Reduced height for better fit\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    title: {\r\n        fontSize: '2rem',\r\n        color: '#00ffcc',\r\n    },\r\n    score: {\r\n        fontSize: '1.5rem',\r\n        color: '#fff',\r\n    },\r\n    gameOver: {\r\n        fontSize: '2rem',\r\n        color: '#ff007f',\r\n    },\r\n    restartButton: {\r\n        padding: '1rem 2rem',\r\n        fontSize: '1rem',\r\n        backgroundColor: '#00ffcc',\r\n        borderRadius: '6px',\r\n        border: 'none',\r\n        cursor: 'pointer',\r\n    },\r\n    grid: {\r\n        display: 'inline-grid',\r\n        gridTemplateColumns: `repeat(${10}, 20px)`, // Adjusted for a smaller layout\r\n    },\r\n    row: {\r\n        display: 'flex',\r\n    },\r\n    cell: {\r\n        width: '20px', // Each cell's width\r\n        height: '20px', // Each cell's height\r\n    }\r\n};\r\n\r\nexport default SnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}