{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\PORTFOLIO\\\\portfolio\\\\src\\\\components\\\\MicroInteractions.js\",\n  _s = $RefreshSig$();\n// src/components/MicroInteractions.js\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  _s();\n  const [snake, setSnake] = useState([[0, 0]]);\n  const [food, setFood] = useState([Math.floor(Math.random() * 10), Math.floor(Math.random() * 10)]);\n  const [direction, setDirection] = useState([0, 1]); // Start moving right\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [gridSize] = useState(10); // 10x10 grid\n\n  useEffect(() => {\n    const handleKeyDown = e => {\n      switch (e.key) {\n        case 'ArrowUp':\n          if (direction[0] !== 1) setDirection([-1, 0]);\n          break;\n        case 'ArrowDown':\n          if (direction[0] !== -1) setDirection([1, 0]);\n          break;\n        case 'ArrowLeft':\n          if (direction[1] !== 1) setDirection([0, -1]);\n          break;\n        case 'ArrowRight':\n          if (direction[1] !== -1) setDirection([0, 1]);\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [direction]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      moveSnake();\n    }, 200);\n    return () => clearInterval(interval);\n  }, [snake, direction]);\n  const moveSnake = () => {\n    const newSnake = [...snake];\n    const head = newSnake[0];\n    const newHead = [head[0] + direction[0], head[1] + direction[1]];\n\n    // Check for wall collisions\n    if (newHead[0] < 0 || newHead[0] >= gridSize || newHead[1] < 0 || newHead[1] >= gridSize || newSnake.some(segment => segment[0] === newHead[0] && segment[1] === newHead[1])) {\n      setGameOver(true);\n      return;\n    }\n\n    // Check for food collision\n    if (newHead[0] === food[0] && newHead[1] === food[1]) {\n      newSnake.unshift(newHead);\n      setFood([Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)]);\n      setScore(prevScore => prevScore + 1);\n    } else {\n      newSnake.unshift(newHead);\n      newSnake.pop(); // Remove last segment\n    }\n    setSnake(newSnake);\n  };\n  const restartGame = () => {\n    setSnake([[0, 0]]);\n    setFood([Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)]);\n    setDirection([0, 1]); // Reset direction to right\n    setGameOver(false);\n    setScore(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: styles.title,\n      children: \"Snake Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: styles.score,\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), gameOver ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: styles.gameOver,\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: styles.restartButton,\n        onClick: restartGame,\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.grid,\n      children: Array.from({\n        length: gridSize\n      }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.row,\n        children: Array.from({\n          length: gridSize\n        }).map((_, colIndex) => {\n          const isSnakeSegment = snake.some(segment => segment[0] === rowIndex && segment[1] === colIndex);\n          const isFood = food[0] === rowIndex && food[1] === colIndex;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              ...styles.cell,\n              backgroundColor: isSnakeSegment ? '#00ffcc' : isFood ? '#ff007f' : '#333'\n            }\n          }, `${rowIndex}-${colIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 37\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(SnakeGame, \"2qMNWqVmyNusf1r9mKyo5dPKL+E=\");\n_c = SnakeGame;\nconst styles = {\n  container: {\n    padding: '1rem',\n    textAlign: 'center',\n    height: '80vh',\n    // Reduced height for better fit\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  title: {\n    fontSize: '2rem',\n    color: '#00ffcc'\n  },\n  score: {\n    fontSize: '1.5rem',\n    color: '#fff'\n  },\n  gameOver: {\n    fontSize: '2rem',\n    color: '#ff007f'\n  },\n  restartButton: {\n    padding: '1rem 2rem',\n    fontSize: '1rem',\n    backgroundColor: '#00ffcc',\n    borderRadius: '6px',\n    border: 'none',\n    cursor: 'pointer'\n  },\n  grid: {\n    display: 'inline-grid',\n    gridTemplateColumns: `repeat(${10}, 20px)` // Adjusted for a smaller layout\n  },\n  row: {\n    display: 'flex'\n  },\n  cell: {\n    width: '20px',\n    // Each cell's width\n    height: '20px' // Each cell's height\n  }\n};\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","SnakeGame","_s","snake","setSnake","food","setFood","Math","floor","random","direction","setDirection","gameOver","setGameOver","score","setScore","gridSize","handleKeyDown","e","key","window","addEventListener","removeEventListener","interval","setInterval","moveSnake","clearInterval","newSnake","head","newHead","some","segment","unshift","prevScore","pop","restartGame","style","styles","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","restartButton","onClick","grid","Array","from","length","map","_","rowIndex","row","colIndex","isSnakeSegment","isFood","cell","backgroundColor","_c","padding","textAlign","height","display","flexDirection","justifyContent","alignItems","fontSize","color","borderRadius","border","cursor","gridTemplateColumns","width","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/PORTFOLIO/portfolio/src/components/MicroInteractions.js"],"sourcesContent":["// src/components/MicroInteractions.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst SnakeGame = () => {\r\n    const [snake, setSnake] = useState([[0, 0]]);\r\n    const [food, setFood] = useState([Math.floor(Math.random() * 10), Math.floor(Math.random() * 10)]);\r\n    const [direction, setDirection] = useState([0, 1]); // Start moving right\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const [gridSize] = useState(10); // 10x10 grid\r\n\r\n    useEffect(() => {\r\n        const handleKeyDown = (e) => {\r\n            switch (e.key) {\r\n                case 'ArrowUp':\r\n                    if (direction[0] !== 1) setDirection([-1, 0]);\r\n                    break;\r\n                case 'ArrowDown':\r\n                    if (direction[0] !== -1) setDirection([1, 0]);\r\n                    break;\r\n                case 'ArrowLeft':\r\n                    if (direction[1] !== 1) setDirection([0, -1]);\r\n                    break;\r\n                case 'ArrowRight':\r\n                    if (direction[1] !== -1) setDirection([0, 1]);\r\n                    break;\r\n            }\r\n        };\r\n\r\n        window.addEventListener('keydown', handleKeyDown);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, [direction]);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            moveSnake();\r\n        }, 200);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [snake, direction]);\r\n\r\n    const moveSnake = () => {\r\n        const newSnake = [...snake];\r\n        const head = newSnake[0];\r\n        const newHead = [head[0] + direction[0], head[1] + direction[1]];\r\n\r\n        // Check for wall collisions\r\n        if (newHead[0] < 0 || newHead[0] >= gridSize || newHead[1] < 0 || newHead[1] >= gridSize || \r\n            newSnake.some(segment => segment[0] === newHead[0] && segment[1] === newHead[1])) {\r\n            setGameOver(true);\r\n            return;\r\n        }\r\n\r\n        // Check for food collision\r\n        if (newHead[0] === food[0] && newHead[1] === food[1]) {\r\n            newSnake.unshift(newHead);\r\n            setFood([Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)]);\r\n            setScore(prevScore => prevScore + 1);\r\n        } else {\r\n            newSnake.unshift(newHead);\r\n            newSnake.pop(); // Remove last segment\r\n        }\r\n\r\n        setSnake(newSnake);\r\n    };\r\n\r\n    const restartGame = () => {\r\n        setSnake([[0, 0]]);\r\n        setFood([Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)]);\r\n        setDirection([0, 1]); // Reset direction to right\r\n        setGameOver(false);\r\n        setScore(0);\r\n    };\r\n\r\n    return (\r\n        <section style={styles.container}>\r\n            <h2 style={styles.title}>Snake Game</h2>\r\n            <p style={styles.score}>Score: {score}</p>\r\n            {gameOver ? (\r\n                <>\r\n                    <p style={styles.gameOver}>Game Over!</p>\r\n                    <button style={styles.restartButton} onClick={restartGame}>Restart Game</button>\r\n                </>\r\n            ) : (\r\n                <div style={styles.grid}>\r\n                    {Array.from({ length: gridSize }).map((_, rowIndex) =>\r\n                        <div key={rowIndex} style={styles.row}>\r\n                            {Array.from({ length: gridSize }).map((_, colIndex) => {\r\n                                const isSnakeSegment = snake.some(segment => segment[0] === rowIndex && segment[1] === colIndex);\r\n                                const isFood = food[0] === rowIndex && food[1] === colIndex;\r\n                                return (\r\n                                    <div key={`${rowIndex}-${colIndex}`} style={{\r\n                                        ...styles.cell,\r\n                                        backgroundColor: isSnakeSegment ? '#00ffcc' : isFood ? '#ff007f' : '#333',\r\n                                    }} />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </section>\r\n    );\r\n};\r\n\r\nconst styles = {\r\n    container: {\r\n        padding: '1rem',\r\n        textAlign: 'center',\r\n        height: '80vh', // Reduced height for better fit\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    title: {\r\n        fontSize: '2rem',\r\n        color: '#00ffcc',\r\n    },\r\n    score: {\r\n        fontSize: '1.5rem',\r\n        color: '#fff',\r\n    },\r\n    gameOver: {\r\n        fontSize: '2rem',\r\n        color: '#ff007f',\r\n    },\r\n    restartButton: {\r\n        padding: '1rem 2rem',\r\n        fontSize: '1rem',\r\n        backgroundColor: '#00ffcc',\r\n        borderRadius: '6px',\r\n        border: 'none',\r\n        cursor: 'pointer',\r\n    },\r\n    grid: {\r\n        display: 'inline-grid',\r\n        gridTemplateColumns: `repeat(${10}, 20px)`, // Adjusted for a smaller layout\r\n    },\r\n    row: {\r\n        display: 'flex',\r\n    },\r\n    cell: {\r\n        width: '20px', // Each cell's width\r\n        height: '20px', // Each cell's height\r\n    }\r\n};\r\n\r\nexport default SnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}